import numpy as np
import time

def create_probability_table(n):
    '''
        n : 각 자리에 가능한 값 갯수
    '''
    digit = 6
    array_len = ((n - 1) * digit) + 1
    P = np.zeros(array_len, dtype=np.int)  # 각 숫자합(= index)이 발생한 횟수를 여기에 저장
    C = np.zeros(array_len, dtype=np.int)  # 각 숫자합(= index)이 발생한 횟수를 여기에 저장(Cumulative)

    # compute P
    start_time = time.time()
    for i0 in range(n):
        for i1 in range(n):
            start_time1 = time.time()
            for i2 in range(n):
                for i3 in range(n):
                    for i4 in range(n):
                        for i5 in range(n):
                            P[i0 + i1 + i2 + i3 + i4 + i5] += 1
            print(f'DEBUG: i0={i0}, i1={i1}, elapsed_time={time.time() - start_time1}')
    print(f'DEBUG: elapsed_time={time.time() - start_time}')
    assert (n ** digit) == np.sum(P)

    # comput C
    for i in range(len(P)):
        C[i] = C[i-1] + P[i]

    print(repr(C))
    print(repr(P))

    return P, C


# n = 10, scale = 1
# [0, 9]
# array_len : 9 * 6 + 1 = 55
C01 = [      1,       7,      28,      84,     210,     462,     924,
          1716,    3003,    5005,    8002,   12334,   18396,   26628,
         37500,   51492,   69069,   90651,  116578,  147070,  182197,
        221859,  265776,  313488,  364365,  417627,  472374,  527626,
        582373,  635635,  686512,  734224,  778141,  817803,  852930,
        883422,  909349,  930931,  948508,  962500,  973372,  981604,
        987666,  991998,  994995,  996997,  998284,  999076,  999538,
        999790,  999916,  999972,  999993,  999999, 1000000]

# n = 10, scale = 4
# [0, 9] ==> [0, 39]
# array_len : 39 * 6 + 1 = 235
C_10_4 = [         1,          7,         28,         84,        210,
              462,        924,       1716,       3003,       5005,
             8008,      12376,      18564,      27132,      38760,
            54264,      74613,     100947,     134596,     177100,
           230230,     296010,     376740,     475020,     593775,
           736281,     906192,    1107568,    1344904,    1623160,
          1947792,    2324784,    2760681,    3262623,    3838380,
          4496388,    5245786,    6096454,    7059052,    8145060,
          9366819,   10737573,   12271512,   13983816,   15890700,
         18009454,   20358478,   22957312,   25826661,   28988415,
         32465664,   36282708,   40465062,   45039456,   50033830,
         55477324,   61400263,   67834137,   74811576,   82366320,
         90533184,   99348018,  108847662,  119069896,  130053385,
        141837619,  154462848,  167970012,  182400666,  197796900,
        214201254,  231656628,  250206187,  269893261,  290761240,
        312853464,  336213108,  360883062,  386905806,  414323280,
        443176749,  473506663,  505352512,  538752676,  573744270,
        610362984,  648642918,  688616412,  730313871,  773763585,
        818991559,  866021353,  914873932,  965567526, 1018117500,
       1072536234, 1128833013, 1187013927, 1247081781, 1309036015,
       1372872634, 1438584148, 1506159522, 1575584136, 1646839755,
       1719904509, 1794752883, 1871355717, 1949680216, 2029689970,
       2111344984, 2194601718, 2279413137, 2365728771, 2453494785,
       2542654059, 2633146278, 2724908032, 2817872926, 2911971700,
       3007132359, 3103280313, 3200338527, 3298227681, 3396866340,
       3496171134, 3596056948, 3696437122, 3797223661, 3898327455,
       3999658509, 4101126183, 4202639442, 4304107116, 4405438170,
       4506541964, 4607328503, 4707708677, 4807594491, 4906899285,
       5005537944, 5103427098, 5200485312, 5296633266, 5391793925,
       5485892699, 5578857593, 5670619347, 5761111566, 5850270840,
       5938036854, 6024352488, 6109163907, 6192420641, 6274075655,
       6354085409, 6432409908, 6509012742, 6583861116, 6656925870,
       6728181489, 6797606103, 6865181477, 6930892991, 6994729610,
       7056683844, 7116751698, 7174932612, 7231229391, 7285648125,
       7338198099, 7388891693, 7437744272, 7484774066, 7530002040,
       7573451754, 7615149213, 7655122707, 7693402641, 7730021355,
       7765012949, 7798413113, 7830258962, 7860588876, 7889442345,
       7916859819, 7942882563, 7967552517, 7990912161, 8013004385,
       8033872364, 8053559438, 8072108997, 8089564371, 8105968725,
       8121364959, 8135795613, 8149302777, 8161928006, 8173712240,
       8184695729, 8194917963, 8204417607, 8213232441, 8221399305,
       8228954049, 8235931488, 8242365362, 8248288301, 8253731795,
       8258726169, 8263300563, 8267482917, 8271299961, 8274777210,
       8277938964, 8280808313, 8283407147, 8285756171, 8287874925,
       8289781809, 8291494113, 8293028052, 8294398806, 8295620565,
       8296706573, 8297669171, 8298519839, 8299269237, 8299927245,
       8300503002, 8301004944, 8301440841, 8301817833, 8302142465,
       8302420721, 8302658057, 8302859433, 8303029344, 8303171850,
       8303290605, 8303388885, 8303469615, 8303535395, 8303588525,
       8303631029, 8303664678, 8303691012, 8303711361, 8303726865,
       8303738493, 8303747061, 8303753249, 8303757617, 8303760620,
       8303762622, 8303763909, 8303764701, 8303765163, 8303765415,
       8303765541, 8303765597, 8303765618, 8303765624, 8303765625,
       8303765625, 8303765625, 8303765625, 8303765625, 8303765625,
       8303765625]

# n = 10, scale = 5
# [0, 9] ==> [0, 49]
# array_len : 49 * 6 + 1 = 295





# def get_probable_num(rate, n_event, C):
#     if rate < 1.0:
#         return 0
#     percentile = (1 - (1 / rate)) * n_event
#     if percentile >= n_event:
#         return (len(C) - 1)
#     for i in range(len(C)):
#         if percentile <= C[i]:
#             return i
#     raise Exception('hmm')

def get_probable_num2(percentile, n_event, C):
    if percentile < 0.0:
        return 0
    if percentile >= 1.0:
        return (len(C) - 1)
    percentile *= n_event
    for i in range(len(C)):
        if percentile <= C[i]:
            return i
    raise Exception('hmm')

def run(rate):
    digit = 6
    n = 10  # [0, 9]

    # scale = 1  # [0,  9]
    # scale = 2  # [0, 19]
    # scale = 3  # [0, 29]
    scale = 4  # [0, 39]
    # scale = 5  # [0, 49]

    scaled_n = n * scale
    n_event = scaled_n ** digit
    diff_n = scaled_n - n

    if rate < 1.0:
        rate = 1.0

    # 백분위 경쟁률
    percentile = 1.0 - (1.0 / rate)
    print(f'DEBUG: Target percentile : {percentile * 100.0}+')

    create_prob_table = True
    if create_prob_table:
        P, C = create_probability_table(scaled_n)
    else:
        C = C_10_4

    middle_idx = len(C) // 2
    print(f'DEBUG: n={n}, len(C)={len(C)}, middle_idx={middle_idx}')

    scaled_solution = get_probable_num2(percentile, n_event, C)
    print(f'DEBUG: scaled_solution={scaled_solution}')

    denominator = (scaled_n - 1) / (n - 1)
    print(f'DEBUG: denominator : {denominator}')

    solution = scaled_solution/denominator
    # print(f'Maybe you need **{solution}** or more.')
    print(f'당첨되려면 아마도 **{solution}** 이상이 필요할거에요~')

run(2.0)
